extend class CEEventHandler
{
	ui double prevScale;
	ui int prevSize;
	
	ui void ConsoleUiTick()
	{
		int w = screen.GetWidth();
		int h = screen.GetHeight();
		
		double textScale = GetConScale(w, h, con_scale);
		int size = w*h;
		
		if (textScale != prevScale || size != prevSize)
		{
			prevScale = textScale;
			prevSize = size;
			let canvas = TexMan.GetCanvas("CONBACK");
			if (canvas)
			{
				canvas.ClearScreen();
				
				let logo = TexMan.CheckForTexture("HUDBACK", TexMan.Type_Any);
				if (logo)
				{
					int logow, logoh;
					[logow, logoh] = TexMan.GetSize(logo);
					
					int conw, conh;
					[conw, conh] = TexMan.GetSize(TexMan.CheckForTexture("CONBACK"));
					for (int i = 0; i < conw; i += logow)
					{
						for (int j = 0; j < conh; j += logoh)
						{
							canvas.DrawTexture(logo, 
								true, 
								i, 
								j,
								DTA_KeepRatio, true,
								DTA_VirtualWidth, 320,
								DTA_VirtualHeight, 200,
								DTA_ColorOverlay, Color(192, 0, 0, 0));
						}
					}
				}
				
				let ver = ReadLump();
				let font = NewConsoleFont;
				let lines = font.BreakLines(ver, w);
				for (int i = 0; i < lines.Count(); i++)
				{
					let text = lines.StringAt(i);
					canvas.DrawText(font, 
						StringUtils.FONT_COLOR, 
						w / textScale - 8 - font.StringWidth(text), 
						h / textScale - (font.GetHeight()*(i+2)) - 4, 
						text,
						DTA_VirtualWidthF, w / textScale,
						DTA_VirtualHeightF, h / textScale,
						DTA_KeepRatio, true);
				}
			}
		}
	}
	
	ui int GetConScale(int width, int height, int altval)
	{
		int scaleval;
		if (altval > 0) scaleval = (altval+1) / 2;
		else if (uiscale == 0)
		{
			// Default should try to scale to 640x400
			int vscale = height / 720;
			int hscale = width / 1280;
			scaleval = max(1, min(vscale, hscale));
		}
		else scaleval = (uiscale+1) / 2;

		// block scales that result in something larger than the current screen.
		int vmax = height / 400;
		int hmax = width / 640;
		int max = max(vmax, hmax);
		return max(1, min(scaleval, max));
	}
	
	ui string ReadLump()
	{
	
		string ver = "";
		int lump = -1;
		string line = "";
		string separator = "";
		while (-1 != (lump = Wads.FindLump("VERSION-CE", lump + 1)))
		{
			line = Wads.ReadLump(lump);
			ver.AppendFormat("%s%s", separator, line);
			separator = "\n";
		}
		return ver;
	}
}