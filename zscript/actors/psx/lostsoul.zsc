class PsxLostSoul : PsxActor replaces LostSoul
{
	bool particlefire;
	
    Default
    {
		//$Title "Lost Soul"
		
        //Health 100;
		Radius 16;
		Height 56;
		Mass 50;
		Speed 8;
		Damage 3;
		PainChance 256;
		Monster;
		+FLOAT +NOGRAVITY +MISSILEMORE +DONTFALL +NOICEDEATH +ZDOOMTRANS +RETARGETAFTERSLAM
		AttackSound "skull/melee";
		PainSound "skull/pain";
		DeathSound "skull/death";
		ActiveSound "skull/active";
		RenderStyle "SoulTrans";
		Obituary "$OB_SKULL";
		Tag "$FN_LOST";

        Health 60;
		PsxActor.AmbientSound "skull/fireloop";
        +PsxActor.WAITLOOK;
        +PsxActor.SEETARGET;
		+DONTGIB
		PsxActor.NightmareMissileChanceFactor 1.0;
    }

    States
    {
        Spawn:
			TNT1 A 0 nodelay A_StopAmbientSound;
	        TNT1 A 0 a_jumpif(hq_soul, "HQSpawn");
            SKUL A 0 a_jumpif(IsSmooth(), "SmoothSpawn");
            SKUL AB 10 BRIGHT A_Look;
            Loop;
        SmoothSpawn:
            zkul abcd 6 bright A_Look;
            Loop;
        HQSpawn:
			TNT1 A 0 { particlefire = true; }
            LSOL A 10 A_Look;
            Loop;

        See:
			TNT1 A 0 A_AttachLightDef("ActiveLight", "LOSTSOUL");
		SeeLoop:
            TNT1 A 0 a_jumpif(hq_soul, "HQSee");
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothSee");
            SKUL AB 6 BRIGHT A_Chase;
            Loop;
        SmoothSee:
            ZKUL a 3 bright A_Chase;
            ZKUL b 3 bright;
            ZKUL c 3 bright A_Chase;
            ZKUL d 3 bright;
            loop;
        HQSee:
			TNT1 A 0 { A_StartAmbientSound(); particlefire = true; }
		HQSeeLoop:
            LSOL A 6 A_Chase;
            Loop;

        Missile:
            TNT1 A 0 a_jumpif(hq_soul, "HQMissile");
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothMissile");
            SKUL C 10 BRIGHT A_FaceTarget;
            SKUL D 4 BRIGHT A_SkullAttack();
            SKUL CD 4 BRIGHT;
            Goto Missile+4;
        SmoothMissile:
            ssku abcda 2 bright a_facetarget;
            ssku b 4 bright a_skullattack();
            ssku abcd 2 bright;
            goto SmoothMissile+6;
        HQMissile:
            LSOL B 10 A_FaceTarget;
            LSOL B 4 A_SkullAttack;
            LSOL BB 4;
            Goto HQMissile+2;

        Pain:
            TNT1 A 0 a_jumpif(hq_soul, "HQPain");
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothPain");
            SKUL E 2 BRIGHT;
            SKUL E 4 BRIGHT A_Pain;
            Goto See;
        SmoothPain:
            LSTP A 3 Bright;
            LSTP B 3 Bright A_Pain;
            Goto See;
        HQPain:
            LSOL C 2;
            LSOL C 4 A_Pain;
            Goto See;

        Death:
			TNT1 A 0 { A_StopAmbientSound(); A_RemoveLight("ActiveLight"); }
            TNT1 A 0 a_jumpif(hq_soul, "HQDeath");
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothDeath");
            SKUL F 6 BRIGHT;
            SKUL G 6 BRIGHT A_Scream;
            SKUL H 6 BRIGHT A_ZPExplosion;
            SKUL I 6 BRIGHT A_NoBlocking;
            SKUL J 6;
            SKUL K 6;
            Stop;
        SmoothDeath:
            ssou ab 3 bright;
            ssou c 3 bright A_Scream;
            ssou d 3 bright A_ZPExplosion;
            ssou e 3 bright;
            ssou f 3 bright A_noblocking;
            ssou gh 3 bright;
            ssou ij 3 bright;
            stop;
        HQDeath:
            LSOL F 6 { A_SpawnItem("SoulTrails"); particlefire = false; }
            LSOL G 6 { A_Scream(); A_ZPExplosion(); }
            LSOL H 6;
            TNT1 A 6 A_NoBlocking;
            Stop;
    }

    override void PostBeginPlay()
    {
        if (hq_soul)
        {
            bFLOATBOB = true;
            FloatBobStrength = 0.3;
			Sprite = GetSpriteIndex("LSOL");
        }
		else
		{
			Sprite = GetSpriteIndex("SKUL");
		}
        if (cx_nashgore_bloodtype != 2)
        {
            bNOBLOOD = true;
            bNOBLOODDECALS = true;
        }
		//always slow down regardless of settings to make it more fair
		if (!ce_actortics)
		{
			reactiontime = int(reactiontime*SCALE_FRAME);
			speed *= SCAlE_TICRATE;
			vel *= SCALE_TICRATE;
		}
        super.PostBeginPlay();
    }
	
	override void Tick()
	{
		super.Tick();
		if (particlefire && level.maptime % 2)
		{
			A_HQTrail();
		}
	}

    void A_HQTrail()
    {
        A_SpawnProjectile("SoulTrails", 24, 0, random (0, 360), CMF_AIMDIRECTION|CMF_BADPITCH, random (0, 160));
    }

    void A_ZPExplosion()
    {
        if (zp_enabled)
        {
            if (hq_enabled || hq_soul)
            {
                A_SetScale(0.3);
                for (int i=0; i<9; i++) A_SpawnItemEx("RandomExplosionSprite",0,0,16,FRandom(0,5),0,FRandom(-1,4),Random(1,360),SXF_TRANSFERSCALE);
                for (int i=0; i<3; i++) A_SpawnItemEx("ExplosionSmoke",0,0,16,FRandom(0,3),0,FRandom(-1,3),Random(1,360),SXF_TRANSFERSCALE);
                A_SetScale(1);
            }
            else
            {
                for (int i=0; i<8; i++)
                {
                    A_SpawnProjectile("FlyingSpark_LostSoul",frandom(0,20)+20,frandom(-10,10),frandom(-200,200),CMF_AIMDIRECTION|CMF_BADPITCH,frandom(-200,200));
                    A_SpawnProjectile("FlyingSpark2_LostSoul",Frandom(0,20)+20,Frandom(-10,10),Frandom(-200,200),CMF_AIMDIRECTION|CMF_BADPITCH,frandom(-200,200));
                    A_SpawnProjectile("FlyingSparkFast_LostSoul",frandom(-10,10)+20,frandom(-10,10),frandom(-200,200),CMF_AIMDIRECTION|CMF_BADPITCH,frandom(-200,200));
                }
            }
        }
    }
}

extend class PsxActor
{
	void A_SkullAttack(double skullspeed = 40)
    {
        skullspeed *= PsxActor.SCALE_TICRATE; //force, 40 without scaling is too fast
        super.A_SkullAttack(skullspeed);
    }
}
