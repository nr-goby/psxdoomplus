class PsxRevenant : PsxActor replaces Revenant
{
    Default
    {
		//$Title "Revenant"
		
        Health 300;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 10;
		PainChance 100;
		Monster;
		//MeleeThreshold 196;
		+MISSILEMORE 
		+FLOORCLIP
		SeeSound "skeleton/sight";
		PainSound "skeleton/pain";
		DeathSound "skeleton/death";
		ActiveSound "skeleton/active";
		MeleeSound "skeleton/melee";
		HitObituary "$OB_UNDEADHIT";
		Obituary "$OB_UNDEAD";
		Tag "$FN_REVEN";

	    +MOVEWITHSECTOR;
        MeleeRange 50;
        PsxActor.FootstepSound "monster/skeletonstep";
        PsxActor.DeathThudSound "monster/xvile";
        +PsxActor.WAITLOOK;
        +PsxActor.SEETARGET;
		PsxActor.NightmareMissileChanceFactor 1.0;
    }

    States
	{
        Spawn:
            SKEL A 0 nodelay a_jumpif(IsSmooth(), "SmoothSpawn");
            SKEL AB 10 A_Look;
            Loop;
        SmoothSpawn:
            SSKL AB 10 A_Look;
            Loop;

        See:
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothSee");
            SKEL A 4 { A_PCTics(2); A_Chase(); A_Footstep(); }
            SKEL ABBCC 4 { A_PCTics(2); A_Chase(); }
            SKEL D 4 { A_PCTics(2); A_Chase(); A_Footstep(); }
            SKEL DEEFF 4 { A_PCTics(2); A_Chase(); }
            Loop;
        SmoothSee:
            RSKE A 4 { A_PCTics(2); A_Chase(); A_Footstep(); }
            RSKE BCD 4 { A_PCTics(2); A_Chase(); }
            RSKE E 4 { A_PCTics(2); A_Chase(); A_Footstep(); }
            RSKE FGH 4 { A_PCTics(2); A_Chase(); }
            Loop;

        Melee:
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothMelee");
            SKEL G 0 A_FaceTarget;
            SKEL G 6 A_SkelWhoosh;
            SKEL H 6 A_FaceTarget;
            SKEL I 6 A_SkelFist;
            Goto See;
        SmoothMelee:
            SSKE A 3 A_FaceTarget;
            SSKE B 3 A_SkelWhoosh;
            SSKE C 3;
            SSKE D 3 A_FaceTarget;
            SSKE E 6 A_SkelFist;
            Goto See;

        Missile:
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothMissile");
            SKEL J 0 BRIGHT A_FaceTarget;
            SKEL J 10 BRIGHT A_FaceTarget;
            SKEL K 10 A_SkelMissile;
            SKEL K 10 A_FaceTarget;
            Goto See;
        SmoothMissile:
            RMIS a 4 a_facetarget;
            RMIS b 3 a_facetarget;
            RMIS c 3 bright a_facetarget;
            RMIS d 3 bright a_skelmissile;
            RMIS e 3 bright a_facetarget;
            RMIS f 2 A_facetarget;
            RMIS g 2 A_facetarget;
            RMIS h 10 A_facetarget;
            Goto See;

        Pain:
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothPain");
            SKEL L 4 A_PCTics(5);
            SKEL L 4 { A_PCTics(5); A_Pain(); }
            Goto See;
        SmoothPain:
            REVP a 4 A_PCTics(5);
            REVP b 4 { A_PCTics(5); A_Pain(); }
            Goto See;

        Death:
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothDeath");
            SKEL L 6;
            SKEL M 6;
            SKEL N 6 A_Scream;
            SKEL O 6 A_NoBlocking;
            SKEL P 6;
            TNT1 A 0 A_DeathThud;
            SKEL Q -1;
            Stop;
        SmoothDeath:
            REVD abc 3;
            REVD d 3 A_Scream;
            REVD e 2 a_noblocking;
            REVD e 1;
            REVD f 3;
            REVD g 3 A_DeathThud;
            REVD h 3;
            REVD i -1;
            stop;

        XDeath:
			TNT1 A 0 a_jumpif(IsSmooth(), "SmoothXDeath");
            TNT1 A 0 A_JumpIf(!kch_enabled,"Death");
			REDX A 4 A_GoreExplosion;
			REDX C 4;
			REDX E 4 A_XScream;
			REDX G 4 A_NoBlocking;
			REDX I 4;
			REDX K -1;
		    Stop;
        SmoothXDeath:
			REDX A 2 A_GoreExplosion;
            REDX B 2;
			REDX C 2;
			REDX D 2;
			REDX E 2 A_XScream;
			REDX F 2;
			REDX G 2 A_NoBlocking;
			REDX HIJ 2;
			REDX K -1;
		    Stop;

        Raise:
			TNT1 A 0 a_jumpif(IsSmooth(), "SmoothRaise");
            SKEL Q 5;
            SKEL PONML 5;
            Goto See;
        SmoothRaise:
            REVD ihgfeedcba 3;
		    Goto See;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		if (ce_pcspeed) MeleeThreshold = 196;
	}
}

class PsxRevenantTracer : PsxProjectile replaces RevenantTracer
{
    Default
    {   
        Radius 11;
		Height 8;
		//Speed 10;
		Damage 10;
		Projectile;
		+SEEKERMISSILE 
		+RANDOMIZE
		+ZDOOMTRANS
		SeeSound "skeleton/attack";
		DeathSound "skeleton/tracex";
		RenderStyle "Add";
        
	    Speed 5;
	    FastSpeed 10;
        PsxActor.PCSpeed 10;
        PsxActor.AmbientSound "skeleton/ballloop";
		PsxActor.NightmareTicFactor 1.0;
    }

    States
	{
        Spawn:
            TNT1 A 0 nodelay a_jumpif(zp_enabled && hq_enabled, "HQSpawn");
            FATB A 2 BRIGHT { A_Tracer(); A_ZPTrail(); }
            FATB B 2 BRIGHT A_Tracer;
            Loop;
        HQSpawn:
            MISL F 2 BRIGHT { A_Tracer(); A_ZPTrail(); }
            Loop;
        Death:
            TNT1 A 0 A_StopAmbientSound;
            TNT1 A 0 a_jumpif(zp_enabled && hq_enabled, "HQDeath");
            TNT1 A 0 a_jumpif(IsSmooth(), "SmoothDeath");
            FBXP A 8 BRIGHT A_ZPExplosion;
            FBXP B 6 BRIGHT;
            FBXP C 4 BRIGHT;
            Stop;
        SmoothDeath:
            RBXP A 2 Bright A_ZPExplosion;
            RBXP BCDEF 2 Bright;
            Stop;
        HQDeath:
            TNT1 A 8 { Radius_Quake(1,6,0,10,0); A_ZPExplosion(); }
	        TNT1 A 6 Light("TRACER_X1");
	        TNT1 A 6 Light("TRACER_X2");
	        TNT1 A 6 Light("TRACER_X3");
            Stop;
	}

    void A_ZPTrail()
    {
        if (zp_enabled)
        {
            if (hq_enabled)
            {
                A_SpawnItemEx("MicroMissileFlare");
                A_SpawnItemEx("ImpBallFlame",0,0,0,FRandom(0,0.5),0,FRandom(-0.5,0.5),Random(1,360));
                A_SpawnItemEx("ImpBallFlame",-Vel.X/2,-Vel.Y/2,-Vel.Z/2,FRandom(-0.5,0.5),FRandom(-0.5,0.5),FRandom(-0.5,0.5),0,SXF_ABSOLUTEPOSITION);
            }
            else
            {
                A_SpawnItemEx("SmallRedFlare", -14, 0, 4, 0, 0, 0, 0, 176);
            }
        }
    }

    void A_ZPExplosion()
    {
        if (zp_enabled)
        {
            if (hq_enabled)
            {
                A_SetScale(0.5);
                for(int i=0;i<5;i++) A_SpawnItemEx("ExplosionSmoke",0,0,0,Random(0,1),0,FRandom(-1,1),Random(1,360),SXF_TRANSFERSCALE);
                for(int i=0;i<8;i++) A_SpawnItemEx("RandomExplosionSprite",0,0,0,Random(0,1),0,FRandom(-1,1),Random(1,360),SXF_TRANSFERSCALE);
                A_SetScale(1.0);
            }
            else
            {
                A_SpawnItem("ReveBoom");
                A_SpawnItemEx("DeathSpawner_Rocket",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
                A_SpawnItem("SlowSmoke");
                for(int i=0;i<4;i++) A_SpawnItemEx("AltSmokeXL",0,0,8,0.03*Random(-50,50),0.03*Random(-50,50),0.015*Random(-100,100),0,0,0);
            }
        }
    }
}

class PsxRevenantTracerSmoke : PsxActor replaces RevenantTracerSmoke
{
    Default
    {
        +NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
		+ZDOOMTRANS
		RenderStyle "Translucent";
		Alpha 0.5;

        Radius 20;
	    Height 16;
    }

    States
	{	
        Spawn:
            TNT1 A 0 nodelay a_jumpif(zp_enabled, "ZPSpawn");
            PUFF BCBCD 4;
            Stop;
        ZPSpawn:
            TNT1 A 0 a_jumpif(hq_enabled, "HQSpawn");
            TNT1 AAAAA 4 A_SpawnItemEx("AltSmoke",Random(-3,3),Random(-3,3),4+Random(-3,3),0.01*Random(-35,35),0.01*Random(-35,35),0.01*Random(-35,35),0,0,8);
            Stop;
        HQSpawn:
        	TNT1 AAAAA 4 A_SpawnItemEx("MicroMissileSmokeTrail",-5,0,0,0,FRandom(-0.25,0.25),FRandom(-0.25,0.25),0,0,96);
            Stop;
	}
}

extend class PsxActor
{
	void A_Tracer()
	{
		if (level.maptime & 4)	return;

		SpawnPuff ("BulletPuff", pos, angle, angle, 3);
		Actor smoke = Spawn ("RevenantTracerSmoke", Vec3Offset(-Vel.X, -Vel.Y, 0.), ALLOW_REPLACE);
	
		if (smoke != null)
		{
			smoke.Vel.Z = 1.;
			smoke.tics -= random[Tracer](0, 3);
			if (smoke.tics < 1)
				smoke.tics = 1;
		}

        A_Tracer2(19.6875 * (speed/pcspeed)); //scales down to 8.4375 with psx speeds
	}
}
