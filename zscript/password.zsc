class OptionMenuItemPasswordCommand : OptionMenuItemCommand
{
	override bool Activate()
	{
		let result = super.Activate();
		Menu.MenuSound("menu/choose");
		let password = CVar.FindCVar("levelselect_password").GetString();
		password = password.MakeLower();
		password.Replace(" ", "");
		
		if (password == "rvnh3ct1cd3m0???")
		{
			Menu.SetMenu("PasswordDemoMenu");
		}
		else if (password == "3n4bl3f34tvr3s??" || //gec
			password == "???03?15?1983???" || //d64 remaster
			password == "k41s3r?w4s?h3r3?") //d64 remaster
		{
			CEPassword.ResetCVars();
			CVar.FindCVar("unl_bonus").SetInt(1);
			CVar.FindCVar("levelselect_level").SetInt(level.info.FindLevelInfo("fun00").LevelNum);
			Menu.SetMenu("PasswordResultMenu");
		}
		else if (CEPassword.Decode(password))
		{
			Menu.SetMenu("PasswordResultMenu");
		}
		else
		{
			Menu.StartMessage("$CEMNU_INVALIDPASSWORD", 1);
		}
		
		return result;
	}
}

class PasswordResultMenu : OptionMenu
{
	override void Init(Menu parent, OptionMenuDescriptor desc)
	{
		let info = level.info.FindLevelByNum(CVar.FindCVar("levelselect_level").GetInt());
		
		Array<OptionMenuItem> items;
		let warp = new("OptionMenuItemSelectLevel");
		warp.Init(info.LevelName, "map "..info.MapName, info.LevelNum, true, true, "["..info.LevelNum.."] %s", true);
		items.Push(warp);
		
		let off = CVar.FindCVar("levelselect_disabled");
		off.SetBool(false);
		
		let spacer = new("OptionMenuItemStaticText");
		items.Push(spacer);
		items.Push(NewOption("$CEMNU_SKILL", "levelselect_skill", "SkillsOption", off));
		items.Push(spacer);
		items.Push(NewOption("$CC_BACKPACK", "levelselect_backpack", "YesNo", off));
		items.Push(NewOption("$TAG_CHAINSAW", "levelselect_chainsaw", "YesNo", off));
		items.Push(NewOption("$TAG_SHOTGUN", "levelselect_shotgun", "YesNo", off));
		items.Push(NewOption("$TAG_SUPERSHOTGUN", "levelselect_ssg", "YesNo", off));
		items.Push(NewOption("$TAG_CHAINGUN", "levelselect_chaingun", "YesNo", off));
		items.Push(NewOption("$TAG_ROCKETLAUNCHER", "levelselect_rl", "YesNo", off));
		items.Push(NewOption("$TAG_PLASMARIFLE", "levelselect_plasma", "YesNo", off));
		items.Push(NewOption("$TAG_BFG9000", "levelselect_bfg", "YesNo", off));
		items.Push(spacer);
		items.Push(NewText("$AMMO_CLIP", "levelselect_clip", off));
		items.Push(NewText("$AMMO_SHELLS", "levelselect_shell", off));
		items.Push(NewText("$AMMO_ROCKETS", "levelselect_rocket", off));
		items.Push(NewText("$AMMO_CELLS", "levelselect_cell", off));
		items.Push(spacer);
		items.Push(NewText("$CEMNU_HEALTH", "levelselect_health", off));
		items.Push(NewText("$CEMNU_ARMOR", "levelselect_armor", off));
		items.Push(NewOption("$CC_BLUEARMOR", "levelselect_ma", "YesNo", off));
		desc.mItems.Move(items);
		super.Init(parent, desc);
	}
	
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		int selectedSkill = CVar.GetCVar("levelselect_skill", players[consoleplayer]).GetInt();
		bool command = Super.MenuEvent(mkey, fromcontroller);
		if (mkey == MKEY_Enter)
		{
			CVar.FindCVar("skill").SetInt(selectedSkill);
			mParentMenu.mParentMenu.mParentMenu.Close();
		}
		return command;
	}
	
	OptionMenuItemTextField NewText(String label, Name cmd, CVar check)
	{
		let text = new("OptionMenuItemTextField");
		text.Init(label, cmd, check);
		return text;
	}
	
	OptionMenuItemOption NewOption(String label, Name cmd, Name values, CVar check)
	{
		let option = new("OptionMenuItemOption");
		option.Init(label, cmd, values, check);
		return option;
	}
}

class CEPassword
{
	enum ENewFlags
	{
		MAPUP1 = 0x20,
		MAPUP2 = 0x40,
		HARDPLUS = 0x80,
	}
	const LASTLEVEL = 256;
	
	static bool, String Encode(PlayerInfo player, String map)
	{
		int tmpbuff[8];
		let nextmap = level.info.FindLevelInfo(map).levelnum;
		if (!player.mo || !nextmap || skill > 4 || nextmap >= LASTLEVEL) return false, "";
		
		tmpbuff[0] = (nextmap & 63) << 2; //map
		tmpbuff[0] |= skill & 3; //skill
		
		// Weapons
		if (player.mo.FindInventory("PsxShotgun", true)) tmpbuff[1] |= (1 << 0);
		if (player.mo.FindInventory("PsxSuperShotgun", true)) tmpbuff[1] |= (1 << 1);
		if (player.mo.FindInventory("PsxChaingun", true)) tmpbuff[1] |= (1 << 2);
		if (player.mo.FindInventory("PsxRocketLauncher", true)) tmpbuff[1] |= (1 << 3);
		if (player.mo.FindInventory("PsxPlasmaRifle", true)) tmpbuff[1] |= (1 << 4);
		if (player.mo.FindInventory("PsxBFG9000", true)) tmpbuff[1] |= (1 << 5);
		if (player.mo.FindInventory("PsxChainsaw", true)) tmpbuff[1] |= (1 << 6);
		
		//Get Maximum Ammo
		let clipammo = GetDefaultByType("PsxClip");
		let shellammo = GetDefaultByType("PsxShell");
		let cellammo = GetDefaultByType("PsxCell");
		let mislammo = GetDefaultByType("PsxRocketAmmo");
		int maxclip = clipammo.MaxAmount;
		int maxshell = shellammo.MaxAmount;
		int maxcell = cellammo.MaxAmount;
		int maxmisl = mislammo.MaxAmount;
	
		// Backpack
		if (player.mo.FindInventory("BackpackItem", true))
		{
			maxclip = clipammo.BackpackMaxAmount;
			maxshell = shellammo.BackpackMaxAmount;
			maxcell = cellammo.BackpackMaxAmount;
			maxmisl = mislammo.BackpackMaxAmount;
			tmpbuff[1] |= 0x80;
		}
		
		int val;
		
		let clip = player.mo.FindInventory("Clip", true);
		if (clip)
		{
			// Clip
			val = (clip.Amount << 3) / maxclip;
			if ((clip.Amount << 3) % maxclip) val += 1;
			tmpbuff[2] = val << 4;
		}
		
		let shell = player.mo.FindInventory("Shell", true);
		if (shell)
		{
			// Shell
			val = (shell.Amount << 3) / maxshell;
			if ((shell.Amount << 3) % maxshell) val += 1;
			tmpbuff[2] |= val;
		}
	
		let cell = player.mo.FindInventory("Cell", true);
		if (cell)
		{
			// Cell
			val = (cell.Amount << 3) / maxcell;
			if ((cell.Amount << 3) % maxcell) val += 1;
			tmpbuff[3] = val << 4;
		}
	
		let rocket = player.mo.FindInventory("RocketAmmo", true);
		if (rocket)
		{
			// Missile
			val = (rocket.Amount << 3) / maxmisl;
			if ((rocket.Amount << 3) % maxmisl) val += 1;
			tmpbuff[3] |= val;
		}
	
		// Health
		val = (player.mo.Health << 3) / 200;
		if ((player.mo.Health << 3) % 200) val += 1;
		tmpbuff[4] = val << 4;
	
		// Armor
		let ba = player.mo.FindInventory("BasicArmor");
		let armorpoints = ba ? ba.Amount : 0;
		val = (armorpoints << 3) / 200;
		if ((armorpoints << 3) % 200) val += 1;
		tmpbuff[4] |= val;
	
		// ArmorType
		let armortype = 0;
		if (ba && armorpoints > 0) armortype = (BasicArmor(ba).SavePercent < 0.5) ? 1 : 2;
		tmpbuff[5] = armortype << 3;
	
		//I used the ArmorType space to add the 0x80 flag to identify that the difficulty is nightmare
		if(skill == 4) tmpbuff[5] |= HARDPLUS;
		
		//Enables the possibility of incorporating more maps
		if (nextmap >= 192)
		{
			tmpbuff[5] |= (MAPUP1|MAPUP2);
		}
		else if (nextmap >= 128)
		{
			tmpbuff[5] |= MAPUP2;
		}
		else if(nextmap >= 64)
		{
			tmpbuff[5] |= MAPUP1;
		}
		
		int newval, shift, code, pos;
		int buff[10];
		
		//Encode Encrypt System
		for (int i = 0; i < 45;)
		{
			newval = 0;
			shift = 16;

			for (int j = 4; j >= 0; j--)
			{
				pos = i;
				if (i < 0) pos = i + 7;

				pos >>= 3;
				code = tmpbuff[pos] & (0x80 >> (i - (pos << 3)));

				if (code != 0) newval |= shift;

				shift >>= 1;
				i++;
			}

			pos = ((i - 1) / 5);
			buff[pos] = newval;
		}

		buff[9] = 0;

		for (int i = 0; i < 9; i++) buff[9] ^= buff[i];
		for (int i = 0; i < 9; i++) buff[i] ^= buff[9];
		
		let alphabet = GetAlphabet();
		String password;
		for (int i = 0; i < 10; i++) password = password..alphabet.Mid(buff[i],1);
		return true, password;
	}
	
	clearscope static bool Decode(String password)
	{
		if (password.CodePointCount() != 10) return false;
		
		int decbuff[8];
		int buff[10];
		for (int i = 0; i < 10; i++)
		{
			buff[i] = GetAlphabet().IndexOf(password.Mid(i,1));
			if (buff[i] == -1) return false;
		}
		for (int i = 0; i < 9; i++) buff[i] ^= buff[9];

		let clipammo = GetDefaultByType("Clip");
		let shellammo = GetDefaultByType("Shell");
		let cellammo = GetDefaultByType("Cell");
		let mislammo = GetDefaultByType("RocketAmmo");
		
		int maxclip = clipammo.MaxAmount;
		int maxshell = shellammo.MaxAmount;
		int maxcell = cellammo.MaxAmount;
		int maxmisl = mislammo.MaxAmount;

		int val = 0;
		for (int i = 0; i < 9; i++) val ^= buff[i];
		
		int newval, shift, pos, code;
		int levelnum, skill;
		if (val == buff[9])
		{
			//Decode Encrypt System
			for (int i = 0; i < 48;)
			{
				newval = 0;
				shift = 0x80;

				for (int j = 7; j >= 0; j--)
				{
					pos = (i / 5);
					code = buff[pos] & (16 >> (i - (pos * 5)));

					if (code != 0) newval |= shift;

					shift >>= 1;
					i++;
				}

				pos = (i - 1);
				if (pos < 0) pos = i + 6;
				pos >>= 3;

				decbuff[pos] = newval;
			}

			levelnum = decbuff[0] >> 2;

			if (decbuff[5] & MAPUP1)
			{
				decbuff[5] &= ~MAPUP1;
				levelnum |= 64;
			}
			if (decbuff[5] & MAPUP2)
			{
				decbuff[5] &= ~MAPUP2;
				levelnum |= 128;
			}
			
			ResetCVars();
			
			if (levelnum != 0 && (levelnum < LASTLEVEL))
			{
				//Console.Printf("Level: "..levelnum);
				CVar.FindCVar("levelselect_level").SetInt(levelnum);
				
				//not vanilla, but unlocks bonus like in doom 64
				if (levelnum == 1) CVar.FindCVar("unl_bonus").SetInt(1);
				
				skill = decbuff[0] & 3;

				//Check that the flag is 0x80, add the nightmare difficulty and remove the flag 0x80
				if (decbuff[5] & HARDPLUS)
				{
					decbuff[5] &= ~HARDPLUS;
					skill = 4;
				}
				
				//Console.Printf("Skill: "..skill);
				CVar.FindCVar("levelselect_skill").SetInt(skill);

				if (((decbuff[2] & 15) < 9) &&	// Shell
					((decbuff[2] >> 4) < 9) &&	// Clip
					((decbuff[3] & 15) < 9) &&	// Missile
					((decbuff[3] >> 4) < 9) &&	// Cell
					((decbuff[4] & 15) < 9) &&	// Armor
					((decbuff[4] >> 4) < 9))	// Health
				{
					// ArmorType
					if ((decbuff[5] >> 3) < 3)
					{
						// Health
						if ((decbuff[4] >> 4) != 0)
						{
							// Weapons
							if ((decbuff[1] >> 0) & 1)
							{
								//Console.Printf("Has shotgun");
								CVar.FindCVar("levelselect_shotgun").SetBool(true);
							}
							if ((decbuff[1] >> 1) & 1)
							{
								//Console.Printf("Has super shotgun");
								CVar.FindCVar("levelselect_ssg").SetBool(true);
							}
							if ((decbuff[1] >> 2) & 1)
							{
								//Console.Printf("Has chaingun");
								CVar.FindCVar("levelselect_chaingun").SetBool(true);
							}
							if ((decbuff[1] >> 3) & 1)
							{
								//Console.Printf("Has rocket launcher");
								CVar.FindCVar("levelselect_rl").SetBool(true);
							}
							if ((decbuff[1] >> 4) & 1)
							{
								//Console.Printf("Has plasma rifle");
								CVar.FindCVar("levelselect_plasma").SetBool(true);
							}
							if ((decbuff[1] >> 5) & 1)
							{
								//Console.Printf("Has bfg");
								CVar.FindCVar("levelselect_bfg").SetBool(true);
							}
							if ((decbuff[1] >> 6) & 1)
							{
								//Console.Printf("Has chainsaw");
								CVar.FindCVar("levelselect_chainsaw").SetBool(true);
							}
							
							// Backpack
							if (decbuff[1] & 0x80)
							{
								//Console.Printf("Has backpack");
								CVar.FindCVar("levelselect_backpack").SetBool(true);
								maxclip = clipammo.BackpackMaxAmount;
								maxshell = shellammo.BackpackMaxAmount;
								maxcell = cellammo.BackpackMaxAmount;
								maxmisl = mislammo.BackpackMaxAmount;
							}

							// Clip
							val = decbuff[2] >> 4;
							val *= maxclip;
							if (val < 0) val += 7;
							val >>= 3;
							//Console.Printf("Clips: "..val);
							CVar.FindCVar("levelselect_clip").SetInt(val);

							// Shell
							val = decbuff[2] & 0xf;
							val *= maxshell;
							if (val < 0) val += 7;
							val >>= 3;
							//Console.Printf("Shells: "..val);
							CVar.FindCVar("levelselect_shell").SetInt(val);

							// Cell
							val = decbuff[3] >> 4;
							val *= maxcell;
							if (val < 0) val += 7;
							val >>= 3;
							//Console.Printf("Cells: "..val);
							CVar.FindCVar("levelselect_cell").SetInt(val);

							// Shell
							val = decbuff[3] & 0xf;
							val *= maxmisl;
							if (val < 0) val += 7;
							val >>= 3;
							//Console.Printf("Rockets: "..val);
							CVar.FindCVar("levelselect_rocket").SetInt(val);

							// Health
							let hval = (decbuff[4] >> 4) * 25;
							//Console.Printf("Health: "..hval);
							CVar.FindCVar("levelselect_health").SetInt(hval);
	
							// Armor
							let aval = (decbuff[4] & 15) * 25;
							//Console.Printf("Armor: "..aval);
							CVar.FindCVar("levelselect_armor").SetInt(aval);
	
							// ArmorType
							let at = decbuff[5] >> 3;
							//Console.Printf("Armor type: "..at);
							if (at == 2) CVar.FindCVar("levelselect_ma").SetBool(true);

							return true;
						}
					}
				}
			}
		}
		return false;
	}
	
	clearscope static string GetAlphabet()
	{
		return "bcdfghjklmnpqrstvwxyz0123456789!";
	}
	
	clearscope static void ResetCVars()
	{
		CVar.FindCVar("levelselect_level").ResetToDefault();
		CVar.FindCVar("levelselect_skill").ResetToDefault();
		CVar.FindCVar("levelselect_health").ResetToDefault();
		CVar.FindCVar("levelselect_armor").ResetToDefault();
		CVar.FindCVar("levelselect_chainsaw").ResetToDefault();
		CVar.FindCVar("levelselect_shotgun").ResetToDefault();
		CVar.FindCVar("levelselect_ssg").ResetToDefault();
		CVar.FindCVar("levelselect_chaingun").ResetToDefault();
		CVar.FindCVar("levelselect_rl").ResetToDefault();
		CVar.FindCVar("levelselect_plasma").ResetToDefault();
		CVar.FindCVar("levelselect_bfg").ResetToDefault();
		CVar.FindCVar("levelselect_clip").ResetToDefault();
		CVar.FindCVar("levelselect_shell").ResetToDefault();
		CVar.FindCVar("levelselect_rocket").ResetToDefault();
		CVar.FindCVar("levelselect_cell").ResetToDefault();
		CVar.FindCVar("levelselect_backpack").ResetToDefault();
		CVar.FindCVar("levelselect_ma").ResetToDefault();
		CVar.FindCVar("levelselect_warping").ResetToDefault();
	}
}